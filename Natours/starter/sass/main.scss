$color-primary: #55c57a;
$color-primary-light: #7ed56f;
$color-primary-dark: #28b485;

$color-grey-dark: #777;
$color-white: #fff;

/* basic reset of styles */
*,
*::after,
*::before {
  margin: 0;
  padding: 0;
  box-sizing: inherit; /* force elements to take what we set in body*/
}

html {
  font-size: 62.5%;
  /* we want 10px originally, but don't want to interfere with user settings.
   Assuming browser default is 16px
   10px / 16px = 0.625px = 62.5%
   */
}

body {
  font-family: 'Lato', sans-serif;
  font-weight: 400;
  /*font-size: 16px;*/
  line-height: 1.7;
  color: $color-grey-dark;
  padding: 3rem;

  box-sizing: border-box;
}

.header {
  position: relative;

  height: 95vh;  /* 95% of the viewport height */
  background-image: linear-gradient(to right bottom,
          rgba($color-primary-light, .8),
          rgba($color-primary-dark, .8)),
          url(../img/hero.jpg);
  background-size: cover; /* fit element to viewport */
  background-position: top;  /* when resizing, the img stays at the top and the bottom is cropped */

  /* topleft-x topleft-y, topright-x topright-y, bottomright-x bottomright-y, bottomleft-x bottomleft-y */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
}

.header__logo-box {
  position: absolute;
  top: 4rem;
  left: 4rem;
}

.header__logo {
  height: 3.5rem;
}

.header__text-box {
  position: absolute;
  top: 40%;   /* % is in relation to the parent element */
  left: 50%;
  transform: translate(-50%, -50%); /* % is in relation to the element itself */

  text-align: center; /* center the button; because it's inline-block it is treated as text */
}

.heading-primary {
  color: $color-white;
  text-transform: uppercase;
  margin-bottom: 6rem;

  /* backface-visibility determines whether the back part of the element is
     visible to the user while it's being transformed */
  backface-visibility: hidden;    /* stops shaking while animation is going on */
}

.heading-primary--main {
  display: block;
  font-size: 6rem;
  font-weight: 400;
  letter-spacing: 3.5rem;

  /* animate */
  animation-name: moveinleft;
  animation-duration: 1s;
  animation-timing-function: ease-out;  /* how the animation progresses over time */

  /*
  animation-delay: 3s;
  animation-iteration-count: 3;  repeat animation X times
  */
}

.heading-primary--sub {
  display: block;
  font-size: 2rem;
  font-weight: 700;
  letter-spacing: 1.7rem;

  /* animate */
  animation: moveinright 1s ease-out;
}


@keyframes moveinleft {
  0% {
    opacity: 0;
    transform: translateX(-10rem);
  }

  80% {
    transform: translateX(1rem); /* "bounce" effect */
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveinright {
  0% {
    opacity: 0;
    transform: translateX(10rem);
  }

  80% {
    transform: translateX(-1rem); /* "bounce" effect */
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

@keyframes moveinbottom {
  0% {
    opacity: 0;
    transform: translateY(3rem);
  }

  100% {
    opacity: 1;
    transform: translate(0);
  }
}

.btn:link,
.btn:visited {
  text-transform: uppercase;
  text-decoration: none;
  padding: 1.5rem 4rem;
  display: inline-block;
  border-radius: 10rem;
  position: relative;
  font-size: 1.6rem;

  /* animate */
  transition: all .2s;

  /* the button is centered by it's parent element.
     because it's inline-block it is treated as text */
}

.btn:hover {
  transform: translateY(-.3rem);
  box-shadow: 0 10px 20px rgba(0, 0, 0, .2);
}

/* on click */
.btn:active {
  transform: translateY(-.1rem);
  box-shadow: 0 5px 10px rgba(0, 0, 0, .2);
}

.btn--white {
  background-color: $color-white;
  color: $color-grey-dark;
}

.btn::after {
  content: '';
  display: inline-block;
  height: 100%;   /* pseudo elements are treated as childs of the element, so 100% is relative to the btn element */
  width: 100%;
  border-radius: 10rem;

  transition: all .4s;  /* so it animates the pseudo-after properties */

  /* place element "behind" the btn element */
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
}

.btn--white::after {
  background-color: $color-white;
}

.btn:hover::after {
  transform: scaleX(1.5) scaleY(1.6);
  opacity: 0; /* so it fades out */
}

.btn--animated {
  animation: moveinbottom .5s ease-out .75s;  /* .75s delay */
  animation-fill-mode: backwards;  /* apply the animation styles before animation actually begins */
}
